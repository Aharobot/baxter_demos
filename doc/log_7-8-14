Today I got the end effector controller script working (ee_position_keyboard.py). However, the hand does not seem to move exactly in the coordinate frame we want it to move in. This may be due to mathematical issues or simply the kinematic constraints of the robot.

It might also be useful to re-implement ee_position_keyboard using the Inverse Kinematics service rather than using the Jacobian inverse.

Got a new gamepad and started implementing an ee_position_joystick program. I need to create a rospackage so that I can run the script with a joystick launchfile, otherwise it does not work.

I also started implementing a point_trajectory_input.py script, which will take desired goal positions from the user and run a trajectory between those points. In order to create a user interface, I figured out how to display images to the screen (easy) and am now working on getting button presses from the user.

Baxter Simulator
================

The folks at Rethink shared the baxter-simulator repo with us, so I am now able to simulate Baxter in Gazebo. I need to adjust the damping on the robot's arms for the simulation to match reality, but it's definitely a useful tool.

The Rethink sdk-docs has instructions for installing the Baxter simulator:
https://github.com/RethinkRobotics/sdk-docs/wiki/Baxter-simulator

I had to modify the instructions slightly for hydro and figure out which dependencies were needed. In the first step they provide, they tell you to install packages with the following line:
$ sudo apt-get install python-wstool python-rosdep ros-groovy-pcl-conversions ros-groovy-control-msgs ros-groovy-cmake-modules ros-groovy-qt-build ros-groovy-moveit-full ros-groovy-driver-common ros-groovy-image-common ros-groovy-rostest gazebo

I replaced "groovy" with "hydro" and ran this command. However, I still needed to install the ros pcl library for hydro.

In the terminal where you plan to run a program on Baxter, go to your ros workspace and type:
$ ./baxter.sh sim

This will connect you to the simulated Baxter, which has hostname localhost (if your workstation has a hostname, Baxter simulator will probably take that as its hostname).

Make sure this is the same baxter.sh script that you've edited to include your ip or hostname.

To start Gazebo with a Baxter model, run the following command:
$ roslaunch baxter_gazebo baxter_world.launch

Note that you need to run ./baxter.sh sim first before the gazebo command will work.

Then you can run Baxter programs from that terminal as usual, except that the simulated grippers appear not to work.
